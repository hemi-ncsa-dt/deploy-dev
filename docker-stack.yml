version: '3.2'

services:
  traefik:
    image: traefik:v2.4
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
    networks:
      - traefik-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/etc/traefik
      - ./traefik/certs/fullchain.pem:/cert.pem
      - ./traefik/certs/privkey.pem:/key.pem
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=false"
      placement:
        constraints:
          - "node.role == manager"
    environment:
      - CF_DNS_API_TOKEN=$WT_CLOUDFLARE_TOKEN
      - TRAEFIK_PROVIDERS_DOCKER_DEFAULTRULE="Host(`\{\{ trimPrefix `/` .Name \}\}.${domain}`)"
    command:
      - "--accesslog=true"
      - "--accesslog.format=json"
      - "--accesslog.filepath=/dev/stdout"

  mongo:
    image: mongo:3.6
    networks:
      - mongo
    volumes:
      - mongo-data:/data/db
      - mongo-cfg:/data/configdb
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=false"

  girder:
    image: wholetale/girder:approval
    networks:
      - traefik-net
      - celery
      - mongo
    volumes:
      - ./volumes:/srv/data
      - ./girder/girder.local.cfg:/girder/girder/conf/girder.local.cfg
      - ./workspace.yaml:/girder/workspace.yaml
      - ./src/wholetale:/girder/plugins/wholetale
      - ./src/synced_folders:/girder/plugins/synced_folders
      - ./src/sem_viewer:/girder/plugins/sem_viewer
      - ./src/table_view:/girder/plugins/table_view
      - ./src/item_previews:/girder/plugins/item_previews
      - ./src/wt_data_manager:/girder/plugins/wt_data_manager
      - ./src/wt_home_dir:/girder/plugins/wt_home_dir
      - ./src/wt_versioning:/girder/plugins/wt_versioning
      - ./src/globus_handler:/girder/plugins/globus_handler
      - ./src/virtual_resources:/girder/plugins/virtual_resources
      - ./src/dataflows:/girder/plugins/dataflows
      - ./src/sample_tracker:/girder/plugins/sample_tracker
      - ./src/gwvolman:/gwvolman
      - ./src/girderfs:/girderfs
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp:/tmp
      - /home/xarth/codes/htmdec:/home/xarth/codes/htmdec
    environment:
      - DOMAIN=${domain}
      - DASHBOARD_URL=https://dashboard.${domain}
      - GOSU_USER=girder:girder:${docker_group}
      - GOSU_CHOWN=/srv/data
      - DATAONE_URL=https://cn-stage-2.test.dataone.org/cn
      - GIRDER_LOCAL_FONTELLO_ARCHIVE=/girder/clients/web/static/built/fontello.zip
      - HOSTDIR=/
    extra_hosts:
      - "images.${domain}:host-gateway"
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.girder.rule=Host(`girder.${domain}`)"
        - "traefik.http.routers.girder.entrypoints=websecure"
        - "traefik.http.routers.girder.tls=true"
        - "traefik.http.routers.girder.tls.certresolver=default"
        - "traefik.http.routers.girder.tls.domains[0].main=${domain}"
        - "traefik.http.routers.girder.tls.domains[0].sans=*.${domain}"
        - "traefik.http.services.girder.loadbalancer.server.port=8080"
        - "traefik.http.services.girder.loadbalancer.passhostheader=true"
        - "traefik.docker.network=wt_traefik-net"
        - "traefik.http.middlewares.girder.forwardauth.address=http://girder:8080/api/v1/user/authorize/"
        - "traefik.http.middlewares.girder.forwardauth.trustforwardheader=true"

  logger:
    image: wholetale/instance_logger:latest
    networks:
      - celery
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=false"

  redis:
    image: redis:7-bullseye
    networks:
      - celery
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=false"

  dashboard:
    image: wholetale/ngx-dashboard:latest
    networks:
      - traefik-net
    environment:
      - GIRDER_API_URL=https://girder.${domain}/api/v1
      - AUTH_PROVIDER=Globus
      - DATAONE_URL=https://cn.dataone.org/cn/v2
      - RTD_URL=https://wholetale.readthedocs.io/en/latest
      - DASHBOARD_DEV=true
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.dashboard.rule=Host(`dashboard.${domain}`)"
        - "traefik.http.routers.dashboard.entrypoints=websecure"
        - "traefik.http.routers.dashboard.tls=true"
        - "traefik.http.services.dashboard.loadbalancer.server.port=80"
        - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
        - "traefik.docker.network=wt_traefik-net"
    volumes:
      - ./src/ngx-dashboard/dist/browser/:/usr/share/nginx/html/

  instance-errors:
    image: wholetale/custom-errors:latest
    networks:
      - traefik-net
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.instance-errors.rule=HostRegexp(`{host:tmp-.*}`)"
        - "traefik.http.routers.instance-errors.entrypoints=websecure"
        - "traefik.http.routers.instance-errors.tls=true"
        - "traefik.http.routers.instance-errors.priority=1"
        - "traefik.http.routers.instance-errors.middlewares=error-pages-middleware"
        - "traefik.http.middlewares.error-pages-middleware.errors.status=400-599"
        - "traefik.http.middlewares.error-pages-middleware.errors.service=instance-errors"
        - "traefik.http.middlewares.error-pages-middleware.errors.query=/{status}.html"
        - "traefik.http.services.instance-errors.loadbalancer.server.port=80"
        - "traefik.docker.network=wt_traefik-net"

  registry:
    image: registry:2.8
    networks:
      - traefik-net
    volumes:
      - ./registry:/var/lib/registry
      - ./registry/auth:/auth:ro
    environment:
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_REALM="Registry Realm"
      - REGISTRY_AUTH_HTPASSWD_PATH=/auth/registry.password
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.registry.rule=Host(`registry.${domain}`)"
        - "traefik.http.routers.registry.entrypoints=websecure"
        - "traefik.http.routers.registry.tls=true"
        - "traefik.http.services.registry.loadbalancer.server.port=5000"
        - "traefik.http.services.registry.loadbalancer.passhostheader=true"
        - "traefik.docker.network=wt_traefik-net"

  images:
    image: registry:2.8
    networks:
      - traefik-net
    volumes:
      - ./registry:/var/lib/registry:ro
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.images.rule=Host(`images.${domain}`)"
        - "traefik.http.routers.images.rule=Method(`GET`)"
        - "traefik.http.routers.images.entrypoints=websecure"
        - "traefik.http.routers.images.tls=true"
        - "traefik.http.services.images.loadbalancer.server.port=5000"
        - "traefik.http.services.images.loadbalancer.passhostheader=true"
        - "traefik.docker.network=wt_traefik-net"

  celery_worker:
    image: wholetale/gwvolman
    networks:
      - celery
    labels:
      - "traefik.enable=false"
    environment:
      - GOSU_USER=wtuser:1000:${docker_group}
      - DOMAIN=${domain}
      - DEV=true
      - REPO2DOCKER_VERSION=${r2d_version}
      - GIRDERFS_IMAGE=${girderfs_image}
      - TRAEFIK_NETWORK=wt_traefik-net
      - TRAEFIK_ENTRYPOINT=websecure
      - REGISTRY_USER=${registry_user}
      - REGISTRY_URL=https://registry.${domain}
      - REGISTRY_PASS=${registry_pass}
      - WT_LICENSE_PATH=${PWD}/volumes/licenses
      - WT_VOLUMES_PATH=${PWD}/volumes
      - MATLAB_FILE_INSTALLATION_KEY=${matlab_file_installation_key}
      - SWARM_NODE_ID={{.Node.ID}}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/tmp:/tmp
      - ./src/gwvolman:/gwvolman
      - ./src/girderfs:/girderfs
      - type: bind
        source: ${PWD}/volumes
        target: ${PWD}/volumes
        bind:
          propagation: rshared
    extra_hosts:
      - "girder.${domain}:host-gateway"
      - "images.${domain}:host-gateway"
      - "registry.${domain}:host-gateway"
    deploy:
      mode: global
      labels:
        - "traefik.enable=true"
    command: -c 3

  postgresql:
    image: postgres:11
    networks:
      - dagster
    environment:
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_DB=postgres_db

  dagster_web:
    image: xarthisius/dagster:1.8.12
    depends_on:
      - postgresql
    entrypoint: ["dagster-webserver", "-h", "0.0.0.0", "-p", "3000", "-w", "workspace.yaml"]
    networks:
      - traefik-net
      - dagster
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.dagster.rule=Host(`dagster.${domain}`)"
        - "traefik.http.routers.dagster.entrypoints=websecure"
        - "traefik.http.routers.dagster.tls=true"
        - "traefik.http.services.dagster.loadbalancer.server.port=3000"
        - "traefik.http.services.dagster.loadbalancer.passhostheader=true"
        - "traefik.docker.network=wt_traefik-net"
    environment:
      - DAGSTER_POSTGRES_USER=postgres_user
      - DAGSTER_POSTGRES_PASSWORD=postgres_password
      - DAGSTER_POSTGRES_DB=postgres_db
    extra_hosts:
      - "girder.${domain}:host-gateway"
    volumes:
      - ./workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
      - ./dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/io_manager_storage:/tmp/io_manager_storage

  dagster_daemon:
    image: xarthisius/dagster:1.8.12
    entrypoint: ["dagster-daemon", "run"]
    environment:
      - DAGSTER_POSTGRES_USER=postgres_user
      - DAGSTER_POSTGRES_PASSWORD=postgres_password
      - DAGSTER_POSTGRES_DB=postgres_db
    volumes:
      - ./workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
      - ./dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/io_manager_storage:/tmp/io_manager_storage
    extra_hosts:
      - "girder.${domain}:host-gateway"
    networks:
      - dagster
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=false"


networks:
  traefik-net:
    driver: overlay
  mongo:
    driver: overlay
  celery:
    driver: overlay
    attachable: true
  dagster:
    driver: overlay
    attachable: true

volumes:
  mongo-data: {}
  mongo-cfg: {}
